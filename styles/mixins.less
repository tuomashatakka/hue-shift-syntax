
// Mixins
.apply(@name, @color) {

  @cls: ~".syntax--@{name}";

  @{cls} { color: @color }}

.set(@scope, @color) {

  @cls: ~".syntax--@{scope}";

  &@{cls} { color: @color }}


.underline(@opacity) {
  display: inline-block;
  position: relative;

  &::before {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    border-bottom: 1px dotted;
    opacity: @opacity }}

.italic() {
  font-style: italic }

.text-styles() {

  &.syntax--bold {
    font-weight: bold }

  &.syntax--italic {
    font-style: italic }}

.text(normal) {
  font-weight: normal;
  font-style: none }

.text(thin) { font-weight: 100 }
.text(light) { font-weight: 300 }
.text(medium) { font-weight: 500 }
.text(bold) { font-weight: 700 }
.text(black) { font-weight: 900 }


.status(@base) {

  &.syntax--changed {
    color: color-dodge(@base, #fe8) }

  &.syntax--deleted {
    color: hue-rotate(@base, 60) }}

.error() {
  position: relative;
  border-radius: 2px;
  color: fade(@text-color-removed, 80%);
  background-color: fade(@text-color-removed, 20%);

  &::after {
    position: absolute;
    display: inline-block;
    bottom: -2px;
    left: -2px;
    right: -2px;
    height: 1px;
    content: "";
    background-color: fade(@text-color-removed, 80%); } }

.variant(shifted, @color, @aberration: 10%) {
  color: desaturate(spin(@color, @shift * @aberration), @aberration/2) }

.variant(dark, @color, @strength: 1) {
  @drkn: unit(@strength * 4 + 4, %);
  @grscl: unit(@strength * 4, %);
  --color: desaturate(darken(@color, @drkn), @grscl);
  color: desaturate(darken(@color, @drkn), @grscl) }

.muted(@col, @f: 1) {
  @mix: unit((@f + 1) * 12, %);
  @sat: unit(@f * 12, %);
  color: var(--color);
  --color: mix(desaturate(@col, @sat), @base, @mix) }

.dimmed(@col, @f: 1) {
  @lum: unit(12 * (@f + 1), %);
  @sat: unit(12 * @f, %);
  color: var(--color);
  --color: desaturate(darken(@col, @lum), @sat) }

.vivid(@col, @f: 1) {
  @sat: unit(15 * @f, %);
  @mult: lighten(@string, unit(6 * @f, %));
  color: var(--color);
  --color: saturate(multiply(@col, @mult), @sat) }

.variant(darker, @color) {
  color: desaturate(darken(@color, 20%), 25%) }

.variant(subtle, @color) {
  color: multiply(@color, lighten(@string, 15%)) }

.variant(vivid, @color, @intensity: 5) {
  color: saturate(multiply(@color, lighten(@string, unit(3 * @intensity, %))), @intensity * 3%) }

.variant(dusk, @color, @strength: 1) {
  @fade: unit(75 - @strength * 3, %);
  @darken: unit(@strength * 2 - 2, %);
  @saturate: unit(16 - @strength, %);
  color: saturate(darken(mix(
    @color,
    @background-color, @fade),
    @darken),
    @saturate) }

// .variant(iter, @var, @color) {
//   & when (@var = normal)  { color: @color }
//   & when (@var = alternate) { color: darken(@color, 15%) }
//   & when (@var = dark)    { color: darken(@color, 15%) }
//   & when (@var = darker)  { color: desaturate(darken(@color, 25%), 20%) }
//   & when (@var = sub)     { color: desaturate(darken(@color, 30%), 40%) }
// }
