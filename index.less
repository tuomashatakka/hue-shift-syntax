@import (reference) "styles/syntax-variables";
@import (reference) "styles/mixins";

@import "styles/base";
@import "styles/editor";
@import "styles/preview";
@import "styles/decorations";

@import "styles/punctuation";
@import "styles/text";
@import "styles/storage";
@import "styles/entities";
@import "styles/grammars/markdown";
@import "styles/grammars/html";
@import "styles/grammars/css";

@import "styles/package/linter";
// @import 'fixtures/default';


.comment() {
  --color: @comment }
.text() {
  --color: @instance }
.string() {
  --color: @string;
  &.vivid { .variant(vivid, @string) }}
.regex() {
  --color: @regex }

.error() {
  --color: @syntax-color-removed }

.keyword() { .color.tertiary.half }
.storage() { .color.tertiary.half }
.storage.subtle { .color.tertiary.quarter }

.class() {
  .color.primary }
.variable() {
  .color.secondary }

.definition() {
  .color.tertiary;
  &.pre { .color.tertiary.variant.darker } // [export default] functiom fname args
  &.keyword { .color.tertiary.variant.dark } // [function] fname args
  &.name { .color.tertiary.variant.light } // function [fname] args
  &.arguments { .color.tertiary.variant.dark } // function fname [args]
  &.call { .color.tertiary.quarter } // [fname](args)
  &.call.arguments { .color.tertiary.half } // fname[(args)]
}

.entity() {
  .color.tertiary.variant.lighter }
.instance() {
  .color.primary.variant.light }

// Delimiters & punctuation
.delim() {
  --color: inherit;
  opacity: 0.5; }

.apply(@clas, @color) {
  @selector: ~".syntax--@{clas}";
  @{selector} {     --color: @color }}

// Color application
[class*='syntax--'] {
  color: var(--color) }

// Mini editor
atom-text-editor[mini] .scroll-view { padding-left: 1px }
